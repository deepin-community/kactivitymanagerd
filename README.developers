
Compiler compatibility
======================

You can (and should) use more modern C++ coding practices. Including
auto, lambdas, smart pointers etc. You can use anything that GCC 4.7
can compile.

These are the compilers you need to test your patches against:
    - GCC 4.7
    - LLVM/Clang 3.1

When you set up different builds alongside the main one, you can use
scripts/commit.sh to build them all before committing. The script
calls git commit if all builds finished successfully. See the script
for more info.


File naming
===========

The service, and the rest of the repository should be in camel-case
(with the exception of source files that don't have corresponding
headers, or vice-versa).


CONVENIENCE MACROS AND METHODS
==============================

There are some convenience macros and methods defined in the headers placed
in the service/utils/ directory.

D_PTR
-----

d_ptr.h and d_ptr_implementation.h define a smart pointer way of doing
the d-ptr (aka pimpl) idiom.

remove_if
---------

remove_if.h is a generic implementation of the erase-remove idiom

for_each_assoc, find_if_assoc
-----------------------------

for_each_assoc.h and find_if_assoc.h define the for_each and find_if
algorithms for associative containers. Works with both Qt and STL containers.

